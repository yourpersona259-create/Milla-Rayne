// Removed FormData import as we're using JSON API instead

import OpenAI from "openai";
import nodeFetch from 'node-fetch';
globalThis.fetch = (nodeFetch as unknown) as typeof fetch;

export interface ImageGenerationResult {
  success: boolean;
  imageUrl?: string;
  error?: string;
}

// Initialize xAI client for image generation
const xaiClient = new OpenAI({ 
  baseURL: "https://api.x.ai/v1", 
  apiKey: process.env.XAI_API_KEY 
});

export async function generateImage(prompt: string): Promise<ImageGenerationResult> {
  if (!process.env.XAI_API_KEY) {
    return {
      success: false,
      error: "xAI API key not found - image generation requires XAI_API_KEY"
    };
  }

  try {
    console.log('Generating image with xAI Aurora model:', prompt);
    
    const response = await xaiClient.images.generate({
      model: "grok-2-image-1212",
      prompt: prompt,
      n: 1
      // Note: xAI Aurora uses default size (1024x768), size parameter not supported yet
    });

    if (response.data && response.data.length > 0 && response.data[0].url) {
      const imageUrl = response.data[0].url;
      
      console.log('Successfully generated image with xAI Aurora');
      return {
        success: true,
        imageUrl
      };
    } else {
      console.error('No image data received from xAI Aurora');
      return {
        success: false,
        error: "No image was generated by Aurora model"
      };
    }
  } catch (error) {
    console.error("xAI Aurora image generation error:", error);
    return {
      success: false,
      error: `Failed to generate image with Aurora: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
}

export function extractImagePrompt(userMessage: string): string | null {
  const message = userMessage.toLowerCase();
  
  // Match patterns like "create an image of..." or "draw a picture of..."
  const patterns = [
    /create an image of\s+(.+)/i,
    /draw a picture of\s+(.+)/i,
    /generate an image of\s+(.+)/i,
    /make an image of\s+(.+)/i,
    /draw\s+(.+)/i,
    /create\s+(.+)/i
  ];

  for (const pattern of patterns) {
    const match = userMessage.match(pattern);
    if (match && match[1]) {
      return match[1].trim();
    }
  }

  return null;
}

export function formatImageResponse(prompt: string, success: boolean, imageUrl?: string, error?: string): string {
  if (success && imageUrl) {
    return `ðŸŽ¨ I've created an image based on your prompt: "${prompt}"\n\n![Generated Image](${imageUrl})\n\nThe image has been generated using AI and should match your description. If you'd like me to create a variation or adjust anything, just let me know!`;
  } else {
    return `I apologize, but I encountered an issue generating the image for "${prompt}". ${error || "Please try again or try a different prompt."}`;
  }
}